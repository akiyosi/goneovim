name: Release
on: 
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  cache-version: v9

jobs:

  check-new-commit:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - run: >
        test \( "${{github.event_name}}" == "schedule"
        -a 0 -lt $(git log --oneline --show-pulls --since "yesterday" -- . ":!.github" ":!.gitignore" ":!.golangci.yml" | wc -l) \)
        -o \( "${{github.event_name}}" != "schedule" \)

#################################################################
# Linux
#################################################################

  linux-x86_64:
    needs: [check-new-commit]
    strategy:
      matrix:
        go-version: [1.24.x]
        platform: [ubuntu-24.04]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      QT_API: 5.13.0
      QT_DEBUG: false
      GO111MODULE: on
      QT_PKG_CONFIG: true
      CGO_CXXFLAGS: "-Wno-deprecated-declarations -O2"
    steps:

    - name: Linux prerequisites 
      run: |
        sudo apt update
        sudo apt-get -y install build-essential libglu1-mesa-dev libpulse-dev libglib2.0-dev cmake
        sudo apt-get --no-install-recommends -qq -y install fontconfig libasound2t64 libegl1 libnss3 libpci3 libxcomposite1 libxcursor1 libxi6 libxrandr2 libxtst6
        sudo apt-get --no-install-recommends -qq -y install libdbus-1-dev libssl-dev libzstd-dev
        sudo apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev
        sudo apt-get install libwayland-dev libwayland-egl++ wayland-scanner++
        sudo apt-get --no-install-recommends install libqt*5-dev qt*5-dev qml-module-qtquick-* qt*5-doc-html
        sudo apt install -y build-essential cmake qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake
        sudo apt install -y \
          qtdeclarative5-dev qml-module-qtquick-controls qml-module-qtquick-controls2 \
          qml-module-qtgraphicaleffects \
          qtmultimedia5-dev qml-module-qtmultimedia \
          qttools5-dev qttools5-dev-tools 
        sudo apt install -y libwayland-dev wayland-protocols

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}

    - name: Free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        sudo rm -rf /usr/share/dotnet

    - name: Get dependencies
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make deps

    - name: Get Qt binding for Go
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make qt_bindings

    - name: Retrieve version
      id: version-linux
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"

    - name: Build
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make app

    - if: github.event_name == 'workflow_dispatch'
      run: echo "ARCHIVE_NAME=goneovim-linux-x86_64" >> $GITHUB_ENV
    - if: github.event_name == 'schedule'
      run: echo "ARCHIVE_NAME=goneovim-linux-x86_64" >> $GITHUB_ENV
    - if: github.event_name == 'push'
      run: echo "ARCHIVE_NAME=goneovim-${{ steps.version-linux.outputs.GONEOVIM_VERSION }}-linux-x86_64" >> $GITHUB_ENV

    - name: Archive
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy
        mv linux "$ARCHIVE_NAME"
        tar -jcvf "$ARCHIVE_NAME".tar.bz2 "$ARCHIVE_NAME"

    - name: Upload for linux
      uses: actions/upload-artifact@v4
      with:
        name: goneovim-linux-x86_64
        path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/${{ env.ARCHIVE_NAME }}.tar.bz2



#################################################################
# Linux ARM
#################################################################

  linux-arm64:
    needs: [check-new-commit]
    strategy:
      matrix:
        go-version: [1.24.x]
        platform: [ubuntu-24.04-arm]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      QT_API: 5.13.0
      QT_DEBUG: false
      GO111MODULE: on
      QT_PKG_CONFIG: true
      CGO_CXXFLAGS: "-Wno-deprecated-declarations -O2"
    steps:

    - name: Linux prerequisites 
      run: |
        sudo apt update
        sudo apt-get -y install build-essential libglu1-mesa-dev libpulse-dev libglib2.0-dev cmake
        sudo apt-get --no-install-recommends -qq -y install fontconfig libasound2t64 libegl1 libnss3 libpci3 libxcomposite1 libxcursor1 libxi6 libxrandr2 libxtst6
        sudo apt-get --no-install-recommends -qq -y install libdbus-1-dev libssl-dev libzstd-dev
        sudo apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev
        sudo apt-get install libwayland-dev libwayland-egl++ wayland-scanner++
        sudo apt-get --no-install-recommends install libqt*5-dev qt*5-dev qml-module-qtquick-* qt*5-doc-html
        sudo apt install -y build-essential cmake qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake
        sudo apt install -y \
          qtdeclarative5-dev qml-module-qtquick-controls qml-module-qtquick-controls2 \
          qml-module-qtgraphicaleffects \
          qtmultimedia5-dev qml-module-qtmultimedia \
          qttools5-dev qttools5-dev-tools 
        sudo apt install -y libwayland-dev wayland-protocols

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}

    - name: Free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        sudo rm -rf /usr/share/dotnet

    - name: Get dependencies
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make deps

    - name: Get Qt binding for Go
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make qt_bindings

    - name: Retrieve version
      id: version-linux
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"

    - name: Build
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make app

    - if: github.event_name == 'workflow_dispatch'
      run: echo "ARCHIVE_NAME=goneovim-linux-arm64" >> $GITHUB_ENV
    - if: github.event_name == 'schedule'
      run: echo "ARCHIVE_NAME=goneovim-linux-arm64" >> $GITHUB_ENV
    - if: github.event_name == 'push'
      run: echo "ARCHIVE_NAME=goneovim-${{ steps.version-linux.outputs.GONEOVIM_VERSION }}-linux-arm64" >> $GITHUB_ENV

    - name: Archive
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy
        mv linux "$ARCHIVE_NAME"
        tar -jcvf "$ARCHIVE_NAME".tar.bz2 "$ARCHIVE_NAME"

    - name: Upload for linux
      uses: actions/upload-artifact@v4
      with:
        name: goneovim-linux-arm64
        path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/${{ env.ARCHIVE_NAME }}.tar.bz2


#################################################################
# MacOS x86_64
#################################################################

  macos-x86_64:
    needs: [check-new-commit]
    strategy:
      matrix:
        go-version: [1.24.x]
        platform: [macos-13]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      QT_HOMEBREW: true
      QT_API: 5.13.0
      QT_DEBUG: false
      GO111MODULE: on
      QT_QMAKE_DIR: /usr/local/opt/qt@5/bin
      CGO_CXXFLAGS: "-Wno-deprecated-declarations -O2"
    steps:

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install Qt for macOS
      run: |
        brew install qt@5

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: ${{ github.workspace }}/src/github.com/${{ github.repository }}

    - name: Get dependencies
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make deps

    - name: Get Qt binding for Go
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make qt_bindings

    - name: Retrieve version
      id: version-macos
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"
        echo "::set-output name=GONEOVIM_VERSION_HASH::$(git rev-parse HEAD)"

    - name: Build
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make app

    - if: github.event_name == 'workflow_dispatch'
      run: echo "ARCHIVE_NAME=goneovim-macos-x86_64" >> $GITHUB_ENV
    - if: github.event_name == 'schedule'
      run: echo "ARCHIVE_NAME=goneovim-macos-x86_64" >> $GITHUB_ENV
    - if: github.event_name == 'push'
      run: echo "ARCHIVE_NAME=goneovim-${{ steps.version-macos.outputs.GONEOVIM_VERSION }}-macos-x86_64" >> $GITHUB_ENV

    - name: Archive
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy
        mv darwin "$ARCHIVE_NAME"
        tar -jcvf "$ARCHIVE_NAME".tar.bz2 "$ARCHIVE_NAME"

    - name: Upload for macos
      uses: actions/upload-artifact@v4
      with:
        name: goneovim-macos-x86_64
        path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/${{ env.ARCHIVE_NAME }}.tar.bz2


#################################################################
# MacOS M1
#################################################################

  macos-arm64:
    needs: [check-new-commit]
    strategy:
      matrix:
        go-version: [1.24.x]
        platform: [macos-14]
        qtversion: [5.15.16]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      QT_HOMEBREW: false
      QT_API: 5.13.0
      QT_DIR: ${{ github.workspace }}/qt5
      QT_STATIC: true
      QT_DEBUG: false
      GO111MODULE: on
      QT_QMAKE_DIR: ${{ github.workspace }}/qt5/bin
      CGO_CXXFLAGS: "-Wno-deprecated-declarations -O2"
    steps:

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download pre built Qt
      run: |
        curl -L -o qt-macos-static-${{ matrix.qtversion }}.tar.bz2 https://github.com/akiyosi/qt-static-builds/releases/download/qt-static-${{ matrix.qtversion }}/qt-macos-arm64-${{ matrix.qtversion }}.tar.bz2
        tar xf qt-macos-static-${{ matrix.qtversion }}.tar.bz2
        mkdir qt5 && mv ./Users/runner/work/qt-static-builds/qt-static-builds/Qt/* qt5/

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: ${{ github.workspace }}/src/github.com/${{ github.repository }}

    - name: Get dependencies
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make deps

    - name: Get Qt binding for Go
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make qt_bindings

    - name: Retrieve version
      id: version-macos
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"
        echo "::set-output name=GONEOVIM_VERSION_HASH::$(git rev-parse HEAD)"

    - name: Build
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        make app

    - if: github.event_name == 'workflow_dispatch'
      run: echo "ARCHIVE_NAME=goneovim-macos-arm64" >> $GITHUB_ENV
    - if: github.event_name == 'schedule'
      run: echo "ARCHIVE_NAME=goneovim-macos-arm64" >> $GITHUB_ENV
    - if: github.event_name == 'push'
      run: echo "ARCHIVE_NAME=goneovim-${{ steps.version-macos.outputs.GONEOVIM_VERSION }}-macos-arm64" >> $GITHUB_ENV

    - name: Archive
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy
        mv darwin "$ARCHIVE_NAME"
        tar -jcvf "$ARCHIVE_NAME".tar.bz2 "$ARCHIVE_NAME"

    - name: Upload for macos
      uses: actions/upload-artifact@v4
      with:
        name: goneovim-macos-arm64
        path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/${{ env.ARCHIVE_NAME }}.tar.bz2



#################################################################
# Windows
#################################################################

  windows-x86_64:
    needs: [check-new-commit]
    strategy:
      matrix:
        go-version: [1.24.0]
        platform: [windows-latest]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      QT_API: 5.13.0
      QT_MSYS2: true
      QT_MSYS2_DIR: C:\a\msys64\
      QT_MSVC: false
      QT_DEBUG: false
      GO111MODULE: on
      CGO_CFLAGS_ALLOW: ".*" 
      CGO_CXXFLAGS_ALLOW: ".*" 
      CGO_LDFLAGS_ALLOW: ".*" 
      CGO_CXXFLAGS: "-Wno-deprecated-declarations -O2"
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      QT_BINDING_VER: "v0.0.0-20251021043539-c059a317d6ad"
    steps:

    - name: Setup MSYS2 and install Qt5
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: mingw64
        install: >
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-qt5
          mingw-w64-x86_64-angleproject
        location: C:\a\

    - shell: msys2 {0}
      run: |
        pacman --noconfirm -S sed git make tree zip unzip 

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: ${{ env.GOPATH }}\src\github.com\${{ github.repository }}

    - name: Get dependencies
      shell: msys2 {0}
      run: |
        export PATH=/c/hostedtoolcache/windows/go/${{ matrix.go-version }}/x64/bin/:$PATH
        cd /d/a/goneovim/goneovim/src/github.com/${{ github.repository }}
        make deps

    - name: Get Qt binding for Go
      shell: msys2 {0}
      run: |
        export PATH=/c/hostedtoolcache/windows/go/${{ matrix.go-version }}/x64/bin/:$PATH
        cd /d/a/goneovim/goneovim/src/github.com/${{ github.repository }}
        go get github.com/akiyosi/qt@${{ env.QT_BINDING_VER }}
        go get github.com/akiyosi/qt/internal/cmd@${{ env.QT_BINDING_VER }}
        go get github.com/akiyosi/qt/internal/cmd/moc@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtdeploy@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtminimal@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtmoc@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtrcc@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtsetup@${{ env.QT_BINDING_VER }}
        $(go env GOPATH)/bin/qtsetup -test=false
        $(go env GOPATH)/bin/qtmoc desktop ./cmd/goneovim

    - name: Retrieve version
      id: version-windows
      run: |
        cd ${{ env.GOPATH }}\src\github.com\${{ github.repository }}
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"

    - name: Build
      shell: msys2 {0}
      run: |
        export PATH=/c/hostedtoolcache/windows/go/${{ matrix.go-version }}/x64/bin/:$PATH
        cd /d/a/goneovim/goneovim/src/github.com/${{ github.repository }}
        $(go env GOPATH)/bin/qtdeploy build desktop ./cmd/goneovim
        cp -pR runtime cmd/goneovim/deploy/windows/

    - name: Bundle specific DLLs
      shell: msys2 {0}
      run: |
        set -e
        DST=/d/a/goneovim/goneovim/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/windows
        cp -u /mingw64/bin/libmd4c.dll        "$DST" || true
        cp -u /mingw64/bin/libzstd.dll        "$DST" || true
        cp -u /mingw64/bin/libbrotlidec.dll   "$DST" || true
        cp -u /mingw64/bin/libpcre2-8-0.dll   "$DST" || true
        cp -u /mingw64/bin/libbrotlicommon.dll   "$DST" || true

    - if: github.event_name == 'workflow_dispatch'
      run: echo "ARCHIVE_NAME=goneovim-windows-x86_64" >> $env:GITHUB_ENV
    - if: github.event_name == 'schedule'
      run: echo "ARCHIVE_NAME=goneovim-windows-x86_64" >> $env:GITHUB_ENV
    - if: github.event_name == 'push'
      run: echo "ARCHIVE_NAME=goneovim-${{ steps.version-windows.outputs.GONEOVIM_VERSION }}-windows-x86_64" >> $env:GITHUB_ENV

    - name: Archive
      shell: msys2 {0}
      run: |
        cd /d/a/goneovim/goneovim/src/github.com/${{ github.repository }}/cmd/goneovim/deploy
        mv windows ${{ env.ARCHIVE_NAME }}
        zip -r ${{ env.ARCHIVE_NAME }}.zip ${{ env.ARCHIVE_NAME }}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: goneovim-windows-x86_64
        path: D:/a/goneovim/goneovim/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/${{ env.ARCHIVE_NAME }}.zip



#################################################################
# Windows ARM
#################################################################

  windows-arm64:
    needs: [check-new-commit]
    strategy:
      matrix:
        go-version: [1.24.0]
        platform: [windows-11-arm]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      QT_API: 5.13.0
      QT_MSYS2: true
      QT_MSYS2_ARCH: "arm64"
      QT_MSYS2_DIR: /
      QT_QMAKE_DIR: /clangarm64/bin
      QT_MSVC: false
      QT_DEBUG: false
      GO111MODULE: on
      CGO_CFLAGS:   "--target=aarch64-w64-mingw32 -O2"
      CGO_CXXFLAGS: "--target=aarch64-w64-mingw32 -Wno-deprecated-declarations -Wno-ignored-attributes -DQT_CORE_LIB -O2"
      CGO_LDFLAGS: "--target=aarch64-w64-mingw32 -L/clangarm64/lib -lQt5Widgets -lQt5Gui -lQt5Core -lQt5Network -lQt5Svg -lQt5Multimedia -lQt5PrintSupport -lQt5Qml -lQt5Quick -lstdc++ -lole32 -luuid -lws2_32 -luser32 -lgdi32 -lopengl32 -lwinmm"
      CPATH: "/clangarm64/include/QtScriptTools/5.15.17/QtScriptTools/private:/clangarm64/include/QtScriptTools:/clangarm64/include/QtScript/5.15.17/QtScript/private:/clangarm64/include/QtScript:/clangarm64/include/QtRemoteObjects/5.15.17/QtRemoteObjects/private:/clangarm64/include/QtRemoteObjects:/clangarm64/include/QtQuick/5.15.17/QtQuick/private:/clangarm64/include/QtQuick:/clangarm64/include/QtQml/5.15.17/QtQml/private:/clangarm64/include/QtQml:/clangarm64/include/QtDesigner/5.15.17/QtDesigner/private:/clangarm64/include/QtDesigner:/clangarm64/include/QtPrintSupport/5.15.17/QtPrintSupport/private:/clangarm64/include/QtPrintSupport:/clangarm64/include/QtOpenGL/5.15.17/QtOpenGL/private:/clangarm64/include/QtOpenGL:/clangarm64/include/QtSvg/5.15.17/QtSvg/private:/clangarm64/include/QtSvg:/clangarm64/include/QtMultimedia/5.15.17/QtMultimedia/private:/clangarm64/include/QtMultimedia:/clangarm64/include/QtDBus/5.15.17/QtDBus/private:/clangarm64/include/QtDBus:/clangarm64/include/QtNetwork/5.15.17/QtNetwork/private:/clangarm64/include/QtNetwork:/clangarm64/include/QtWidgets/5.15.17/QtWidgets/private:/clangarm64/include/QtWidgets:/clangarm64/include/QtGui/5.15.17/QtGui/private:/clangarm64/include/QtGui:/clangarm64/include/QtCore/5.15.17/QtCore/private:/clangarm64/include/QtCore:/clangarm64/include"
      LIBRARY_PATH: /clangarm64/lib
      CC:  "aarch64-w64-mingw32-clang"
      CXX: "aarch64-w64-mingw32-clang++"
      AR:  "llvm-ar"
      RANLIB: "llvm-ranlib"
      NM:  "llvm-nm"
      PKG_CONFIG: "/clangarm64/bin/pkg-config"
      PKG_CONFIG_PATH: "/clangarm64/lib/pkgconfig"
      MSYSTEM: "CLANGARM64"
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      QT_BINDING_VER: "v0.0.0-20251021043539-c059a317d6ad"
    steps:

    - name: Setup MSYS2 (ARM64) and install Qt5
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: clangarm64
        install: >
          mingw-w64-clang-aarch64-toolchain
          mingw-w64-clang-aarch64-llvm
          mingw-w64-clang-aarch64-pkgconf
          mingw-w64-clang-aarch64-angleproject
          mingw-w64-clang-aarch64-qt5-base
          mingw-w64-clang-aarch64-qt5-multimedia
          mingw-w64-clang-aarch64-qt5-svg
          mingw-w64-clang-aarch64-qt5-imageformats
          mingw-w64-clang-aarch64-qt5-tools
          mingw-w64-clang-aarch64-qt5-declarative
          mingw-w64-clang-aarch64-qt5-remoteobjects
          mingw-w64-clang-aarch64-qt5-script
          mingw-w64-clang-aarch64-qt5-quickcontrols2
        location: C:\a\

    - name: Setup tools
      shell: msys2 {0}
      run: |
        pacman --noconfirm -S sed git make tree zip unzip

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: ${{ env.GOPATH }}\src\github.com\${{ github.repository }}

    - name: Get dependencies
      shell: msys2 {0}
      run: |
        export PATH=/c/hostedtoolcache/windows/go/${{ matrix.go-version }}/arm64/bin/:$PATH
        cd /c/a/goneovim/goneovim/src/github.com/${{ github.repository }}
        make deps

    - name: Get Qt binding for Go
      shell: msys2 {0}
      run: |
        export PATH=/c/hostedtoolcache/windows/go/${{ matrix.go-version }}/arm64/bin/:$PATH
        cd /c/a/goneovim/goneovim/src/github.com/${{ github.repository }}
        go get github.com/akiyosi/qt@${{ env.QT_BINDING_VER }}
        go get github.com/akiyosi/qt/internal/cmd@${{ env.QT_BINDING_VER }}
        go get github.com/akiyosi/qt/internal/cmd/moc@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtdeploy@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtminimal@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtmoc@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtrcc@${{ env.QT_BINDING_VER }}
        go install -v -tags=no_env github.com/akiyosi/qt/cmd/qtsetup@${{ env.QT_BINDING_VER }}
        $(go env GOPATH)/bin/qtsetup -test=false
        $(go env GOPATH)/bin/qtmoc desktop ./cmd/goneovim

    - name: Test
      shell: msys2 {0}
      run: |
        export PATH=/c/hostedtoolcache/windows/go/${{ matrix.go-version }}/arm64/bin:/clangarm64/bin:$PATH
        cd /c/a/goneovim/goneovim/src/github.com/${{ github.repository }}
        make test

    - name: Build ARM64 resource
      shell: msys2 {0}
      run: |
        export PATH=/c/hostedtoolcache/windows/go/${{ matrix.go-version }}/arm64/bin:/clangarm64/bin:$PATH
        cd /c/a/goneovim/goneovim/src/github.com/${{ github.repository }}
        /clangarm64/bin/llvm-windres -O coff -i cmd/goneovim/icon.rc -o cmd/goneovim/icon_windows_arm64.syso

    - name: Strip incompatible .syso (amd64)
      shell: msys2 {0}
      run: |
        cd /c/a/goneovim/goneovim/src/github.com/${{ github.repository }}
        rm cmd/goneovim/icon_windows.syso

    - name: Retrieve version
      id: version-windows
      run: |
        cd ${{ env.GOPATH }}\src\github.com\${{ github.repository }}
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"

    - name: Build
      shell: msys2 {0}
      run: |
        export PATH=/c/hostedtoolcache/windows/go/${{ matrix.go-version }}/arm64/bin:/clangarm64/bin:$PATH
        cd /c/a/goneovim/goneovim/src/github.com/${{ github.repository }}
        $(go env GOPATH)/bin/qtdeploy build desktop ./cmd/goneovim
        cp -pR runtime cmd/goneovim/deploy/windows/

    - if: github.event_name == 'workflow_dispatch'
      run: echo "ARCHIVE_NAME=goneovim-windows-arm64" >> $env:GITHUB_ENV
    - if: github.event_name == 'schedule'
      run: echo "ARCHIVE_NAME=goneovim-windows-arm64" >> $env:GITHUB_ENV
    - if: github.event_name == 'push'
      run: echo "ARCHIVE_NAME=goneovim-${{ steps.version-windows.outputs.GONEOVIM_VERSION }}-windows-arm64" >> $env:GITHUB_ENV

    - name: Archive
      shell: msys2 {0}
      run: |
        cd /c/a/goneovim/goneovim/src/github.com/${{ github.repository }}/cmd/goneovim/deploy
        mv windows ${{ env.ARCHIVE_NAME }}
        zip -r ${{ env.ARCHIVE_NAME }}.zip ${{ env.ARCHIVE_NAME }}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: goneovim-windows-arm64
        path: C:/a/goneovim/goneovim/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/${{ env.ARCHIVE_NAME }}.zip



#################################################################
# FreeBSD
#################################################################

#   freebsd:
#     needs: [check-new-commit]
#     strategy:
#       matrix:
#         go-version: [1.24.x]
#         platform: [macos-latest]
#     runs-on: ${{ matrix.platform }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0
# 
#     - name: Retrieve version
#       id: version-freebsd
#       run: |
#         echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"
#         echo "::set-output name=GONEOVIM_VERSION_HASH::$(git rev-parse HEAD)"
# 
#     - name: Build for freeBSD
#       uses: cross-platform-actions/action@v0.13.0
#       env:
#         GOPATH: /home/runner/go
#         QT_PKG_CONFIG: true
#         QT_API: 5.13.0
#         QT_DEBUG: false
#         QT_STATIC: true
#         GO111MODULE: on
#         GOPROXY: https://goproxy.io
#         CGO_CPPFLAGS: '-O3 -Wno-deprecated'
#       with:
#         environment_variables: GOPATH QT_PKG_CONFIG QT_API QT_DEBUG QT_STATIC GO111MODULE GOPROXY
#         operating_system: freebsd
#         architecture: x86_64
#         version: '13.2'
#         shell: bash
#         memory: 12G
#         cpu_count: 4
#         run: |
#           yes | sudo pkg install git go pkgconf
#           yes | sudo pkg install devel/qt5
#           yes | sudo pkg install gmake
#           gmake qt_bindings
#           gmake deps
#           gmake app
# 
#     - if: github.event_name == 'workflow_dispatch'
#       run: echo "ARCHIVE_NAME=goneovim-freebsd" >> $GITHUB_ENV
#     - if: github.event_name == 'schedule'
#       run: echo "ARCHIVE_NAME=goneovim-freebsd" >> $GITHUB_ENV
#     - if: github.event_name == 'push'
#       run: echo "ARCHIVE_NAME=goneovim-${{ steps.version-freebsd.outputs.GONEOVIM_VERSION }}-freebsd" >> $GITHUB_ENV
# 
#     - name: Archive
#       run: |
#         cd cmd/goneovim/deploy
#         mv freebsd "$ARCHIVE_NAME"
#         tar -jcvf "$ARCHIVE_NAME".tar.bz2 "$ARCHIVE_NAME"
#   
#     - name: Upload
#       uses: actions/upload-artifact@v4
#       with:
#         name: goneovim-freebsd
#         path: ${{ github.workspace }}/cmd/goneovim/deploy/${{ env.ARCHIVE_NAME }}.tar.bz2


  publish:
    # needs: [linux, windows, macos, freebsd]
    needs: [linux-x86_64, linux-arm64, windows-x86_64, windows-arm64, macos-x86_64, macos-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'TAG_NAME=nightly' >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV

      - if: env.TAG_NAME == 'nightly'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          (echo 'SUBJECT=Goneovim Nightly build';
           echo 'PRERELEASE=--prerelease') >> $GITHUB_ENV
          gh release delete nightly --yes || true
          git push origin :nightly || true

      - if: env.TAG_NAME != 'nightly'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          (echo "SUBJECT=Goneovim $TAG_NAME";
           echo 'PRERELEASE=') >> $GITHUB_ENV

      - name: Publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create $TAG_NAME $PRERELEASE --title "$SUBJECT" --target $GITHUB_SHA /home/runner/work/goneovim/goneovim/goneovim-macos-x86_64/* /home/runner/work/goneovim/goneovim/goneovim-macos-arm64/* /home/runner/work/goneovim/goneovim/goneovim-linux-x86_64/* /home/runner/work/goneovim/goneovim/goneovim-linux-arm64/* /home/runner/work/goneovim/goneovim/goneovim-windows-x86_64/* /home/runner/work/goneovim/goneovim/goneovim-windows-arm64/*


