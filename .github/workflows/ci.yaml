name: CI

on: [push, pull_request]

env:
  cache-version: v4

jobs:

#################################################################
# Linux
#################################################################

  test-and-build-linux:
    strategy:
      matrix:
        # go-version: [1.12.x, 1.13.x]
        go-version: [1.17.x]
        platform: [ubuntu-latest] #, windows-latest]
        qtversion: [5.13.0, 5.14.1, 5.15.1]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      QT_DIR: ${{ github.workspace }}/Qt
      QT_VERSION: ${{ matrix.qtversion }}
      QT_API: 5.13.0
      QT_DEBUG: false
      GO111MODULE: off
      GOPROXY: https://goproxy.io
      QT_STATIC: true
    steps:
    - name: Linux prerequisites 
      run: |
        sudo apt update
        sudo apt-get -y install build-essential libglu1-mesa-dev libpulse-dev libglib2.0-dev

    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install Qt for linux
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qtversion }}
        host: linux
        target: desktop
        dir: ${{ github.workspace }}
        modules: 'qtcharts qtdatavis3d qtpurchasing qtvirtualkeyboard qtwebengine qtnetworkauth qtwebglplugin qtscript'
        # mirror: 'http://mirrors.ocf.berkeley.edu/qt/'

    - name: Get Qt binding for Go
      run: |
        go get -v github.com/therecipe/qt/cmd/...

    # - name: Remove binding repo for restoring cache
    #   if: ${{ steps.cache-qt-bindings.outputs.cache-hit }} == 'true'
    #   run: |
    #     rm -fr ${{ github.workspace }}/src/github.com/therecipe

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: ./src/github.com/${{ github.repository }}

    - name: Free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean

    - uses: actions/cache@v2
      id: cache-qt-bindings-linux
      with:
        path: ${{ github.workspace }}/src/github.com/therecipe
        key: ${{ matrix.qtversion }}-qtbindings-linux-${{ env.cache-version }}

    - name: Generate Qt bindings
      if: ${{ steps.cache-qt-bindings-linux.outputs.cache-hit != 'true' }}
      run: $(go env GOPATH)/bin/qtsetup -test=false

    - name: Get dependencies
      run: |
        go get -v -t -d github.com/${{ github.repository }}/...
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim
        $(go env GOPATH)/bin/qtmoc

    - name: Test
      run: go test github.com/${{ github.repository }}/editor

    - name: Retrieve version
      id: version-linux
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"

    - name: Build
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim
        $(go env GOPATH)/bin/qtdeploy -ldflags "-X github.com/akiyosi/goneovim/editor.Version=${{ steps.version-linux.outputs.GONEOVIM_VERSION }}" -docker build linux_static
        cp -pR ../../runtime ./deploy/linux/

    - name: Archive
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy
        mv linux goneovim-linux
        tar -jcvf goneovim-linux.tar.bz2 goneovim-linux

    - name: Upload for linux
      if: ${{ matrix.qtversion == '5.14.1' }}
      uses: actions/upload-artifact@v1
      with:
        name: goneovim-linux
        path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/goneovim-linux.tar.bz2


#################################################################
# MacOS
#################################################################

  test-and-build-macos-11:
    strategy:
      matrix:
        go-version: [1.17.x]
        platform: [macos-11]
        qtversion: [5.15.2]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      QT_DIR: ${{ github.workspace }}/Qt
      QT_VERSION: ${{ matrix.qtversion }}
      QT_API: 5.13.0
      QT_DEBUG: false
      GO111MODULE: off
      GOPROXY: https://goproxy.io
      QMAKE_APPLE_DEVICE_ARCHS: arm64
      # SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk
    steps:

    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install Qt for macOS
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qtversion }}
        host: mac
        target: desktop
        dir: ${{ github.workspace }}
        modules: 'qtcharts qtdatavis3d qtpurchasing qtvirtualkeyboard qtwebengine qtnetworkauth qtwebglplugin qtscript'
        setup-python: 'false'
        # mirror: 'http://mirrors.ocf.berkeley.edu/qt/'

    - name: Get Qt binding for Go
      run: |
        go get -v github.com/therecipe/qt/cmd/...

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: ./src/github.com/${{ github.repository }}

    - uses: actions/cache@v2
      id: cache-qt-bindings-macos-11
      with:
        path: ${{ github.workspace }}/src/github.com/therecipe
        key: ${{ matrix.qtversion }}-qtbindings-macos-11-${{ env.cache-version }}

    - name: Generate Qt bindings
      continue-on-error: true
      if: ${{ steps.cache-qt-bindings-macos-11.outputs.cache-hit != 'true' }}
      run: $(go env GOPATH)/bin/qtsetup -test=false

    - name: Get dependencies
      run: |
        go get -v -t -d github.com/${{ github.repository }}/...
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim
        $(go env GOPATH)/bin/qtmoc

    - name: Test
      continue-on-error: true
      run: go test github.com/${{ github.repository }}/editor

    - name: Retrieve version
      id: version-macos-11
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"
        echo "::set-output name=GONEOVIM_VERSION_HASH::$(git rev-parse HEAD)"

    - name: Build
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim
        $(go env GOPATH)/bin/qtdeploy -ldflags "-X github.com/akiyosi/goneovim/editor.Version=${{ steps.version-macos-11.outputs.GONEOVIM_VERSION }}" build desktop
        cp -pR ../../runtime ./deploy/darwin/goneovim.app/Contents/Resources/
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/
        /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string ${{ steps.version-macos-11.outputs.GONEOVIM_VERSION_HASH }}" "./cmd/goneovim/deploy/darwin/goneovim.app/Contents/Info.plist"
        /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string ${{ steps.version-macos-11.outputs.GONEOVIM_VERSION }}"  "./cmd/goneovim/deploy/darwin/goneovim.app/Contents/Info.plist"
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/darwin/goneovim.app/Contents/Frameworks/
        rm -fr QtQuick.framework
        rm -fr QtVirtualKeyboard.framework

    - name: Archive
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy
        mv darwin goneovim-macos
        tar -jcvf goneovim-macos.tar.bz2 goneovim-macos

    - name: Upload for macos
      uses: actions/upload-artifact@v1
      with:
        name: goneovim-macos
        path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/goneovim-macos.tar.bz2


#################################################################
# Windows
#################################################################

  test-windows:
    strategy:
      matrix:
        platform: [windows-latest]
        qtversion: [5.14.1]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      GOROOT: ${{ github.workspace }}\go-root
      QT_VERSION: ${{ matrix.qtversion }}
      QT_DIR: ${{ github.workspace }}\Qt
      QT_MSYS2: true
      QT_MSYS2_DIR: D:\a\_temp\msys64\
      QT_MSVC: false
      QT_DEBUG: false
      GO111MODULE: off
      CGO_CFLAGS_ALLOW: ".*" 
      CGO_CXXFLAGS_ALLOW: ".*" 
      CGO_LDFLAGS_ALLOW: ".*" 
      #CGO_ENABLED: 1
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:

    - name: Setup MSYS2 and install Qt5
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: mingw64
        install: mingw-w64-x86_64-toolchain
    - shell: msys2 {0}
      run: |
        pacman --noconfirm -S sed git mingw-w64-x86_64-toolchain mingw-w64-x86_64-qt5

    - name: Install Go
      continue-on-error: true
      run: |
        curl -sL --retry 10 --retry-delay 60 -O https://dl.google.com/go/go1.16.5.windows-amd64.zip
        expand-archive -path go1.16.5.windows-amd64.zip -destinationpath .
        Move-Item -Path go -Destination go-root

    - name: Get Qt binding for Go
      run: |
        ${{ github.workspace }}\go-root\bin\go.exe get -v github.com/therecipe/qt/cmd/...

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: .\src\github.com\${{ github.repository }}

    # FIXME: Should be fixed with the deprecation of set-env
    - name: Set PATH
      run: |
        $env:PATH = "C:\\msys64\\usr\\bin;${{ github.workspace }}\\bin;${{ github.workspace }}\\go-root\\bin;$env:PATH"
        echo "::set-env name=PATH::$env:PATH"

    - uses: actions/cache@v2
      id: cache-qt-bindings-windows
      with:
        path: |
          ${{ github.workspace }}\src\github.com\therecipe\qt\*
          !${{ github.workspace }}\src\github.com\therecipe\qt\.git
        key: ${{ matrix.qtversion }}-qtbindings-windows-${{ env.cache-version }}

    - name: Generate Qt bindings
      if: ${{ steps.cache-qt-bindings-windows.outputs.cache-hit != 'true' }}
      env:
        QT_API: 5.13.0
      shell: msys2 {0}
      run: |
        /d/a/goneovim/goneovim/bin/qtsetup -test=false

    - name: Get dependencies
      continue-on-error: true
      env:
        QT_API: 5.13.0
      run: |
        go get -v -d github.com/${{ github.repository }}/...
        cd ${{ github.workspace }}\src\github.com\${{ github.repository }}\cmd\goneovim
        ${{ github.workspace }}\bin\qtmoc.exe

    - name: Test
      env:
        QT_API: 5.13.0
      shell: msys2 {0}
      run: |
        /d/a/goneovim/goneovim/go-root/bin/go test github.com/akiyosi/goneovim/editor


  build-windows:
    strategy:
      matrix:
        platform: [windows-latest]
        qtversion: [5.14.1]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: C:\
      GOROOT: C:\go-root
      QT_VERSION: ${{ matrix.qtversion }}
      # QT_DIR: ${{ github.workspace }}\Qt
      QT_API: 5.13.0
      QT_MSYS2: true
      QT_MSYS2_DIR: D:\a\_temp\msys64\
      QT_MSYS2_STATIC: true
      QT_MSVC: false
      QT_DEBUG: false
      GO111MODULE: off
      CGO_CFLAGS_ALLOW: ".*" 
      CGO_CXXFLAGS_ALLOW: ".*" 
      CGO_LDFLAGS_ALLOW: ".*" 
      #CGO_ENABLED: 1
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:

    - name: Install Go
      continue-on-error: true
      run: |
        curl -sL --retry 10 --retry-delay 60 -O https://dl.google.com/go/go1.16.5.windows-amd64.zip
        expand-archive -path go1.16.5.windows-amd64.zip -destinationpath .
        Move-Item -Path go -Destination C:\go-root

    - name: Setup MSYS2 and install Qt5
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: mingw64
        install: mingw-w64-x86_64-toolchain
    - shell: msys2 {0}
      run: |
        pacman --noconfirm -S sed git unzip zip mingw-w64-x86_64-qt-creator mingw-w64-x86_64-qt5-static
        pacman -Scc
        pacman -Sc

    # - name: Patch qt5
    #   shell: msys2 {0}
    #   run: | 
    #     curl -sL --retry 10 --retry-delay 60 -O https://github.com/akiyosi/github-actions-playground/releases/download/qt5-patched-qtbug-71737/qt-5.15.5_patched-qtbug71737.zip
    #     unzip qt-5.15.5_patched-qtbug71737.zip
    #     cp -fpR qt5/* /mingw64/qt5-static/
    #     rm -fr qt5
    #     rm qt-5.15.5_patched-qtbug71737.zip

    - name: Get Qt binding for Go
      run: |
        C:\go-root\bin\go.exe get -v -tags=no_env github.com/therecipe/qt/cmd/...

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: 'akiyosi/goneovim'
        fetch-depth: 0
        path: .\src\github.com\akiyosi\goneovim

    - uses: actions/cache@v2
      id: cache-qt-bindings-windows
      with:
        path: |
          C:\src\github.com\therecipe\qt\*
          !C:\src\github.com\therecipe\qt\.git
        key: ${{ matrix.qtversion }}-qtbindings-windows-${{ env.cache-version }}

    - name: Generate Qt bindings
      if: ${{ steps.cache-qt-bindings-windows.outputs.cache-hit != 'true' }}
      shell: msys2 {0}
      run: |
        export PATH=$PATH:/c/bin:/c/go-root/bin:/d/a/_temp/msys64/usr/bin
        cp /c/bin/* /d/a/_temp/msys64/usr/bin
        cp /c/go-root/bin/go /d/a/_temp/msys64/usr/bin
        /c/bin/qtsetup -test=false

    - name: Get dependencies
      continue-on-error: true
      run: |
        go get -v -d github.com/akiyosi/goneovim/...

    - name: Generate moc
      shell: msys2 {0}
      run: |
        export PATH=$PATH:/c/bin:/c/go-root/bin:/d/a/_temp/msys64/usr/bin
        cd /c/src/github.com/akiyosi/goneovim/
        cd ./cmd/goneovim
        /c/bin/qtmoc

    - name: Retrieve version
      id: version-windows
      run: |
        cd C:\\src\\github.com\\akiyosi\\goneovim
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"

    - name: Build
      shell: msys2 {0}
      run: |
        export PATH=$PATH:/c/bin:/c/go-root/bin:/d/a/_temp/msys64/usr/bin
        cd /c/src/github.com/akiyosi/goneovim/cmd/goneovim
        /c/bin/qtdeploy -ldflags "-X github.com/akiyosi/goneovim/editor.Version=${{ steps.version-windows.outputs.GONEOVIM_VERSION }}" build desktop
        cp -pR ../../runtime ./deploy/windows/

    # https://github.com/therecipe/qt/issues/657
    # - name: Test
    #   continue-on-error: true
    #   shell: msys2 {0}
    #   run: |
    #     /c/go-root/bin/go test github.com/akiyosi/goneovim/editor

    - name: Archive
      shell: msys2 {0}
      run: |
        cd /c/src/github.com/akiyosi/goneovim/cmd/goneovim/deploy
        mv windows goneovim-windows-mingw
        zip goneovim-windows-mingw -r goneovim-windows-mingw

    - name: Upload for windows
      uses: actions/upload-artifact@v1
      with:
        name: goneovim-windows-mingw
        path: C:/src/github.com/akiyosi/goneovim/cmd/goneovim/deploy/goneovim-windows-mingw.zip



  # - name: Retrieve version
  #   id: version-windows
  #   run: |
  #     cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
  #     echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"

  #   - name: Build
  #     env:
  #       QT_API: 5.13.0
  #     shell: msys2 {0}
  #     run: |
  #       export PATH=$PATH:/d/a/goneovim/goneovim/go-root/bin/
  #       cd /d/a/goneovim/goneovim/src/github.com/akiyosi/goneovim/cmd/goneovim
  #       /d/a/goneovim/goneovim/bin/qtdeploy -ldflags "-X github.com/akiyosi/goneovim/editor.Version=${{ steps.version-windows.outputs.GONEOVIM_VERSION }}"  build desktop

  #   - name: Add runtime
  #     run: |
  #       cd ${{ github.workspace }}/src/github.com/${{ github.repository }}\cmd\goneovim
  #       Copy-Item ..\..\runtime -destination .\deploy\windows\ -recurse

  #   - name: Upload for windows
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: Goneovim-latest-win64-${{ matrix.qtversion }}
  #       path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/windows


  test-and-build-windows-msvc:
    strategy:
      matrix:
        platform: [windows-latest]
        qtversion: [5.14.1]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: ${{ github.workspace }}
      GOROOT: ${{ github.workspace }}\go-root
      GOROOT_BOOTSTRAP: ${{ github.workspace }}\go-boot
      GOROOT_FINAL: ${{ github.workspace }}\go-boot
      GOVSVARSPATH: ${{ github.workspace }}\BuildTools\VC\Auxiliary\Build\vcvars64.bat
      QT_VERSION: ${{ matrix.qtversion }}
      QT_DIR: ${{ github.workspace }}\Qt
      QT_MSVC: true
      QT_DEBUG: false
      QT_STATIC: true
      GO111MODULE: off
      #CGO_ENABLED: 1
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:

    - uses: actions/cache@v2
      id: cache-msvc2017-buildtools
      with:
        path: ${{ github.workspace }}\BuildTools
        key: ${{ matrix.qtversion }}-msvc2017-buildtools-${{ env.cache-version }}

    - name: Intall MSVC 2017 Visual C++ Buildtools
      if: ${{ steps.cache-msvc2017-buildtools.outputs.cache-hit != 'true' }}
      run : |
        curl -sL --retry 10 --retry-delay 60 -O https://aka.ms/vs/15/release/vs_buildtools.exe
        New-Item -Path BuildTools -ItemType Directory 
        .\vs_BuildTools.exe --quiet --wait --norestart --nocache --installPath ${{ github.workspace }}\BuildTools --add Microsoft.VisualStudio.Workload.VCTools --includeOptional
        Start-Sleep -s 690

    - name: Check MSVC 2017 Visual C++ Buildtools installation
      run : |
        dir ${{ github.workspace }}\
        dir ${{ github.workspace }}\BuildTools
        dir ${{ github.workspace }}\BuildTools\VC
        dir ${{ github.workspace }}\BuildTools\VC\Tools
        dir ${{ github.workspace }}\BuildTools\VC\Tools\MSVC
        dir ${{ github.workspace }}\BuildTools\VC\Tools\MSVC\14.16.27023
        dir ${{ github.workspace }}\BuildTools\VC\Tools\MSVC\14.16.27023\bin
        dir ${{ github.workspace }}\BuildTools\VC\Tools\MSVC\14.16.27023\bin\Hostx64
        dir ${{ github.workspace }}\BuildTools\VC\Tools\MSVC\14.16.27023\bin\Hostx64\x64

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qtversion }}
        host: windows
        target: desktop
        modules: 'qtcharts qtdatavis3d qtpurchasing qtvirtualkeyboard qtwebengine qtnetworkauth qtwebglplugin qtscript'
        arch: 'win64_msvc2017_64'
        install-deps: 'true'
        dir: ${{ github.workspace }}
        # mirror: 'http://mirrors.ocf.berkeley.edu/qt/'

    - name: Check dir
      continue-on-error: true
      run: |
        dir ${{ github.workspace }}\Qt
        dir ${{ github.workspace }}\Qt\5.14.1\msvc2017_64

    - name: Install Go
      continue-on-error: true
      run: |
        curl -sL --retry 10 --retry-delay 60 -O https://dl.google.com/go/go1.13.4.windows-amd64.zip
        expand-archive -path go1.13.4.windows-amd64.zip -destinationpath .
        Move-Item -Path go -Destination go-root

    - name: Get Qt binding for Go
      run: |
        ${{ github.workspace }}\go-root\bin\go.exe get -v -tags=no_env github.com/therecipe/qt/cmd/...

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: .\src\github.com\${{ github.repository }}

    # FIXME: Should be fixed with the deprecation of set-env
    - name: Set PATH
      run: |
        $env:PATH = "${{ github.workspace }}\\go-root\\bin;$env:PATH"
        $env:PATH = "${{ github.workspace }}\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx64\\x64;$env:PATH"
        echo "::set-env name=PATH::$env:PATH"

    - name: Enable experimental Go features Step.1
      continue-on-error: true
      run: |
        git clone https://github.com/golang/go.git ${{ github.workspace }}\go-msvc
        cd ${{ github.workspace }}\go-msvc
        git fetch "https://go.googlesource.com/go" refs/changes/46/133946/5
        Git checkout FETCH_HEAD
        echo "devel +6741b7009d" > VERSION

    - name: Enable experimental Go features Step.2
      continue-on-error: true
      run: |
        cd ${{ github.workspace }}\go-msvc
        curl -sL --retry 10 --retry-delay 60 https://github.com/golang/go/commit/e4535772ca3f11084ee5fa4d4bd3a542e143b80f.patch | patch -p1 -R

    - name: Enable experimental Go features Step.3
      continue-on-error: true
      run: |
        cd ${{ github.workspace }}\go-msvc
        curl -sL --retry 10 --retry-delay 60 https://github.com/golang/go/commit/f10815898c0732e2e6cdb697d6f95f33f8650b4e.patch | patch -p1 -R

    - name: Enable experimental Go features Step.4
      continue-on-error: true
      run: |
        cd ${{ github.workspace }}
        Move-Item -Path go-root -Destination go-boot
        Move-Item -Path go-msvc -Destination go-root
        cd ${{ github.workspace }}\go-root\src
        .\make.bat

    - uses: actions/cache@v2
      id: cache-qt-bindings-windows
      with:
        path: |
          ${{ github.workspace }}\src\github.com\therecipe\qt\*
          !${{ github.workspace }}\src\github.com\therecipe\qt\.git
        key: ${{ matrix.qtversion }}-qtbindings-windows-${{ env.cache-version }}

    - name: Generate Qt bindings
      env:
        QT_API: 5.13.0
      if: ${{ steps.cache-qt-bindings-windows.outputs.cache-hit != 'true' }}
      run: ${{ github.workspace }}\bin\qtsetup.exe -test=false
      shell: cmd

    - name: Retrieving dependencies
      continue-on-error: true
      run: |
        go get -v -d github.com/${{ github.repository }}/...
        cd ${{ github.workspace }}\src\github.com\${{ github.repository }}\cmd\goneovim
        ${{ github.workspace }}\bin\qtmoc.exe

    # - name: Convert to compatible sources on Qt5.12
    #   if: ${{ matrix.qtversion == '5.12.6' }}
    #   run: |
    #     cd ${{ github.workspace }}\src\github.com\${{ github.repository }}
    #     $data=Get-Content  .\editor\workspace.go | % { $_ -replace "NewQVariant31", "NewQVariant33" }
    #     $data | Out-File   .\editor\workspace.go -Encoding UTF8
    #     $data=Get-Content  .\editor\popupmenu.go | % { $_ -replace "AddWidget2", "AddWidget" }
    #     $data | Out-File   .\editor\popupmenu.go -Encoding UTF8
    #     $data=Get-Content  .\editor\message.go | % { $_ -replace "AddWidget2", "AddWidget" }
    #     $data | Out-File   .\editor\message.go -Encoding UTF8
    #     $data=Get-Content  .\editor\window.go | % { $_ -replace "DrawText6", "DrawText5" }
    #     $data | Out-File   .\editor\window.go -Encoding UTF8
    #     $data=Get-Content  .\editor\screen.go | % { $_ -replace "NewQVariant5", "NewQVariant2" }
    #     $data | Out-File   .\editor\screen.go -Encoding UTF8
    #     $ch1="), text, gui.NewQTextOption2(core.Qt__AlignVCenter),"
    #     $rep1="), int(core.Qt__AlignVCenter), text, nil,"
    #     $data=Get-Content  .\editor\window.go | % { $_ -replace [regex]::Escape($ch1), $rep1 }
    #     $data | Out-File   .\editor\window.go -Encoding UTF8
    #     $data=Get-Content  .\editor\cursor.go | % { $_ -replace "DrawText6", "DrawText5" }
    #     $data | Out-File   .\editor\cursor.go -Encoding UTF8
    #     $data=Get-Content  .\editor\cursor.go | % { $_ -replace "NewQVariant10", "NewQVariant12" }
    #     $data | Out-File   .\editor\cursor.go -Encoding UTF8
    #     $ch2="), text, gui.NewQTextOption2(core.Qt__AlignVCenter),"
    #     $rep2="), int(core.Qt__AlignVCenter), text, nil,"
    #     $data=Get-Content  .\editor\cursor.go | % { $_ -replace [regex]::Escape($ch2), $rep2 }
    #     $data | Out-File   .\editor\cursor.go -Encoding UTF8
    #     $data=Get-Content  .\util\utils.go | % { $_ -replace "SetOffset2", "SetOffset3" }
    #     $data | Out-File   .\util\utils.go -Encoding UTF8

    - name: Test
      continue-on-error: true
      run: go test github.com\akiyosi\goneovim\editor

    - name: Retrieve version
      id: version-windows
      run: |
        cd ${{ github.workspace }}/src/github.com/${{ github.repository }}
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"

    - name: Build
      env:
        QT_API: 5.13.0
      run: |
        cd ${{ github.workspace }}\src\github.com\${{ github.repository }}\cmd\goneovim
        ${{ github.workspace }}\bin\qtdeploy -ldflags "-X github.com/akiyosi/goneovim/editor.Version=${{ steps.version-windows.outputs.GONEOVIM_VERSION }}"  build desktop
        Copy-Item ..\..\runtime -destination .\deploy\windows\ -recurse

    - name: Upload for windows
      uses: actions/upload-artifact@v1
      with:
        name: goneovim-windows-msvc
        path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/cmd/goneovim/deploy/windows
